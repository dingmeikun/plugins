#!/bin/ksh

HOST_TYPE=`uname -s | tr "-" "_"`

if [ $HOST_TYPE = "Linux" ]
then
    alias echo="echo -e"
fi

# 
# volley Parallel Process
# 

# Default Value
#---------------------
Ver=2.1								# Version
Tty=`tty | awk -F \/ '{print $3"/"$4}'`	# Terminal 
cpuUse=2							# Max CPU Cost
cpuFree=20							# Min CPU Free
endLine=`tput lines`				# Screen EndLine
vLine=`expr $endLine - 6`			# volley Lines
expr \( `tput cols` + 1 \) / 27 | read vCol	# volley Cols
	if [ $vLine -lt 1 -o $vCol -lt 3 ]; then
		echo "Err: Screen is Too Small to show Menu (7*80 at least)"
		exit
	fi
maxP=`expr $vLine \* $vCol`			# Max Channel
	if [ $maxP -gt 1024 ]; then
		echo "Err: More than 1024 Channels, To reduce the screen"
		exit
	fi
Volley=$maxP						# Max Parallels
AutoKey=1							# Auto-KeyPress Model (C-Continue, Q-Quite)



usage(){
	cat <<-!!! |
		*
		*volley : Parallel Process $Ver
		*
		*Usage:
		*	volley [-parameter...] BatFile
		*Parameter:
		*	-u	Max CPU Cost per Process (Default $cpuUse)
		*	-f	Min CPU Idle (Default $cpuFree)
		*	-v	Max concurrency (1-$Volley) (Default $Volley)
		*	-k	Backgroup model (C: Continue when Err, Q: Quite When Err)
		*BatchFile note:
		*	#Comment
		*	!BAT File Name
		*	%Command1_desc Command1
		*	Command2
		*	==========	(Waiting For last Command Finished)
		*	%Command3_desc Command3
		*Output file:
		*	BateFile.err	Error process & Error Info
		*	BateFile.bak	Fail Command & Unexecuted Command
		*
	!!!
	awk -F'*' '{ print $2 }'
	exit
}



# Prepare Parameter
#---------------------
while getopts :u:f:v:k: OPTION
do
	case $OPTION in
		u)  
			test $OPTARG -ge 0 -a $OPTARG -le 99 2>/dev/null
			if [ $? -ne 0 ]; then usage; fi
			cpuUse=$OPTARG ;;
		f) 
			test $OPTARG -ge 0 -a $OPTARG -le 99 2>/dev/null
			if [ $? -ne 0 ]; then usage; fi
			cpuFree=$OPTARG ;;
		v)
			test $OPTARG -ge 1 -a $OPTARG -le $Volley 2>/dev/null
			if [ $? -ne 0 ]; then usage; fi
			Volley=$OPTARG ;;
		k)
			if [ "$OPTARG" = "C" -o "$OPTARG" = "Q" ]; then
				AutoKey=$OPTARG
			else
				usage
			fi ;;
		?)
			usage ;;
	esac
done
shift `expr $OPTIND - 1`

if [ $# -ne 1 ]; then usage; fi

if [ ! -f $1 ]; then usage; fi

cpuFree=`expr $cpuFree + $cpuUse`


# Variable
#--------------------------------------
tsk=0			# Total Tasks
fnd=0			# Finished Tasks
err=0			# Error Tasks
run=0			# Processing Tasks
free=$Volley	# Free process
errbz=0			# Error Flag
cpuIdle=0		# cpu Idle
#--------------------------------------
fbat=$1					# BAT File
ftmp=$1.tmp				# Tmp File
ferr=$1.err				# Err File
fbak=$1.bak				# Bak File
bname="Parallel Process"	# BAT File Name
#--------------------------------------
# y,x 	Array for coordinate
# pn 	Array for process name
# id 	Array for process ID
# pe	Process Order
#--------------------------------------
# STTYSAVE		# Terminal Info



# Test Output
#--------------------
>$ftmp
if [ $? -ne 0 ]; then
    echo "Permission is Forbidden"
    exit
fi
rm $ftmp


# Test Input
#---------------------
read tsk<<-!!
`awk '{
    if(NF==0) next;
	c=substr($1,1,1)
	if(c=="#" || c=="=" || c=="!") next;
    print $1
}' $fbat | wc -l`
!!
if [ $tsk -lt 1 ]; then
	echo "Input File <$fbat> Invalid!"
    exit
fi

a=`grep "^!" $fbat | head -1`
if [ -n "$a" ]; then
	bname=`expr substr "$a" 2 78`
fi


# Init 
#----------------------------------

if [ "$AutoKey" = "0" ]; then
	STTYSAVE="`stty -g`"
	stty -echo
fi
clear
a=`awk -v vCol=$vCol 'BEGIN{ for(i=3;i<vCol;i++)printf("- -------------------------"); print "" }'`

echo "[1m$bname[0m"
echo "----------------------------------------------------- -------------------------$a"
echo "                  Miss:       Fins:       Errs:       Pros:0      CpuFree:"
echo "[3;24H$tsk"
echo "----------------------------------------------------- -------------------------$a"
echo "[`expr $endLine - 1`;0H\c"
echo "----------------------------------------------------- -------------------------$a"
echo "  Volley$Ver\c"
awk -v vLine=$vLine -v vCol=$vCol -v Volley=$Volley '
BEGIN{
	for(vc=0;vc<vCol;vc++)
	for(vl=0;vl<vLine;vl++)
	{
		i=vl+vc*vLine;
		y=vl+5;
		x=vc*27+1;
        printf "y[%d]=%d;\t",i,y
        printf "x[%d]=%d;\t",i,x
        printf "pn[%d]=%d;\t",i,i
        printf "id[%d]=0;\t",i
        printf "pe[%d]=%d;\t",i,i+1
        printf "echo \"[%d;%dH.\\c\"\n",y,x
    }
}' >$ftmp
. $ftmp

echo "[$endLine;16HStartTime`date +%X`    CurrentTime\c"
if [ "$AutoKey" = "0" ]; then
	stty raw
fi



# Function
#-----------------------


# Waiting for Key Press
gWaitKey(){
	while :; do
		FTmp=`dd if=/dev/tty bs=1 count=1 2>/dev/null`
		if [ `expr index "$FTmp" "$1"` -eq 1 ]; then break; fi
	done
	echo $FTmp
}



# Refresh Process & Free Process
freeidle(){
    # Refresh Time
    echo "[$endLine;43H`date +%X`[D\c"

    # Finished Process
	echo "${id[*]}" |
    awk -v fnd=$fnd -v Tty=$Tty '
	BEGIN{
		cmd="ps -t "Tty
		i=0
		while(cmd|getline a){
			if(++i==1) continue
			split(a,b)
			ps[b[1]]=0
		}
		run=0
		RS=" "
	}
	{
		if($1==0) next
		if($1 in ps) run++
		else
			printf "pe[%d]=%d;  id[%d]=0;\n",NR-1,++fnd+"'$maxP'",NR-1
    }
    END{
        printf "fnd=%d; echo \"[3;36H%d\\c\"\n",fnd,fnd
        printf "run=%d; echo \"[3;60H%d [D[D\\c\"\n",run,run
        printf "free=%d\n","'$Volley'"-run
	}' >$ftmp
    . $ftmp

    # Refresh Errors
    a=`grep "^%" $fbak | wc -l`
    if [ $a -ne $err ]; then
        err=$a
        echo "[3;48H$err\c"
    fi

	#  Refresh CPU Idle
	cpuIdle=`sar 1 1 | tail -1 | awk '{print $8}' | awk -F \. '{print $1}'`
	if [ -z "$cpuIdle" ]
	then
		cpuIdle=99
	fi
	echo "[3;75H$cpuIdle% [D[D[D\c"
}



# Return blank unless Find a free process
idle(){
	echo "${pe[*]}" |
	awk '
	BEGIN{ RS=" "; min=999999; idle=999999; }
	{
		if($1>0 && $1<min){ min=$1; idle=NR-1; }
	}
	END{ if(idle<999999) print idle; }
    '
}



# Main Function
#----------------------

runflag=1		# Execute Flag 1-execute 2-Quite
> $ferr
echo "!$bname" >$fbak

awk '{
	if(NF==0) next;

	c=substr($1,1,1)
	if(c=="#" || c=="!") next;
	if(c=="="){ print "========="; enxt; }
	if(c=="%"){
		i=2; printf substr($1,2,23);
	}
	else{
		i=1; pn=$1; for(t=2;t<=NF;t++) pn=pn"_"$t
		printf substr(pn,1,23)
	}

	for(;i<NF;i++) printf " "$i
	print " "$i
}' $fbat |
while read pname pcomm
do
	# Save Bak File when break
	if [ $runflag -eq 2 ]; then
        echo "%$pname $pcomm" >> $fbak
		next
	fi

    # process parallel
    if [ "$pname" = "=========" ]; then
        echo "$pname" >> $fbak
    	while [ $run -ne 0 ]; do freeidle; done
        # Pause when last Command Error
        if [ $errbz -lt $err ]; then
			echo "[$endLine;55H[7mError!Press C-Continue Q-Quite[0m[$endLine;67H\c";
			if [ "$AutoKey" = "0" ]; then
				a=`gWaitKey CQ`
			else
				a=$AutoKey
			fi
    	    echo "[$endLine;55H                       \c";
            if [ "$a" = "Q" ]; then
				runflag=2
                next
            fi
    		errbz=$err
        fi
        next
    fi

    # Waiting for CPU Idle
    while [ "$cpuIdle" -le "$cpuFree" ]; do freeidle; done

    # Waiting For Free Process
	while [ $run -ge $Volley ]; do freeidle; done

	# Find a Process
	pnum=`idle`

    # Record channel
    pe[$pnum]=0
    pn[$pnum]=`echo $pname | tr '' ' '`
	run=`expr $run + 1`
	cpuIdle=`expr $cpuIdle - $cpuUse`

    # add Process
    {
		yy=${y[$pnum]}
		xx=${x[$pnum]}
		echo "[$yy;${xx}H                         [$yy;${xx}H[7m->${pn[$pnum]}[0m\c"

		fpout=$fbat.$pnum
		echo "%$pname $pcomm" >$fpout
		fdate=$fbat.date
		echo "%$pname begin   " `date +%X` >> $fdate

		echo "-----------------------" >>$fpout
        eval "$pcomm" 1>>$fpout 2>&1
        res=$?
        if [ $res -ne 0 ]; then
            echo "<ErrorCode: $res>" >> $fpout
			echo "----------------------" >>$fpout
			cat $fpout >>$ferr
            echo "%$pname $pcomm" >> $fbak
			echo "[$yy;${xx}H[7m*[0m${pn[$pnum]}\c"
			echo "%$pname fail    " `date +%X` >> $fdate
		else
			echo "[$yy;${xx}H0${pn[$pnum]}\c"

			#add by liusc
			echo "%$pname success " `date +%X` >> $fdate
        fi
		rm $fpout
    } &
    res=$?
    if [ $res -ne 0 ]; then
		echo "%$pname $pcomm" >>$fbak
		echo "*Fork error!* %$pname $pcomm" >>$ferr
    fi

    # record Process Flag
    id[$pnum]=$!
done 


# exit process
while [ $run -ne 0 ]; do freeidle; done
if [ $err -eq 0 ]; then rm -f $ferr $fbak; fi

echo "[$endLine;35HEndTime\c"
echo "[$endLine;55H[7mComplete!PressQ to Quite[0m[$endLine;69H\c"
if [ "$AutoKey" = "0" ]; then
	gWaitKey Q
	stty "$STTYSAVE"
	clear
else
	echo "Q"
fi


rm -f $ftmp
return $err
